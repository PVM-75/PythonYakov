import tkinter as tk
import random

class Game:
    def __init__(self, root):
        self.root = root
        self.root.title("Игра с пушкой и коробками")
        self.canvas = tk.Canvas(root, width=600, height=400, bg='lightblue')
        self.canvas.pack()

        self.bullets = []
        self.boxes = []
        self.ammo_drops = []  # Список для патронов, падающих с неба
        self.score = 0  # Переменная для счета
        self.max_ammo = 32  # Максимальное количество патронов
        self.current_ammo = self.max_ammo  # Текущее количество патронов (изначально)
        self.is_game_started = False  # Флаг для проверки начала игры
        self.is_game_paused = False  # Флаг для проверки на паузу
        self.box_fall_speed = 5  # Скорость падения коробок
        self.ammo_fall_speed = 3  # Скорость падения патронов
        self.ammo_spawn_delay = 15000  # Задержка на спавн патронов (15 секунд в миллисекундах)
        self.ammo_collected = 0  # Счетчик собранных патронов
        self.ammo_spawn_timer = None  # Таймер для спавна патронов
        self.double_shot = False  # Флаг для проверки необходимости двойного выстрела
        self.upgrade_level = 0  # Уровень улучшения пушки

        # Начальная позиция пушки
        self.pistol_pos = 300
        self.pistol_pos_y = 360

        self.score_label = tk.Label(root, text=f"Счет: {self.score}", font=("Arial", 14))
        self.score_label.pack(side=tk.LEFT)

        self.ammo_label = tk.Label(root, text=f"Патроны: {self.current_ammo}/{self.max_ammo}", font=("Arial", 14))
        self.ammo_label.pack(side=tk.RIGHT)

        self.start_button = tk.Button(root, text="Старт", command=self.start_game, font=("Arial", 14))
        self.start_button.pack()

        self.pause_button = tk.Button(root, text="Пауза", command=self.pause_game, font=("Arial", 14))
        self.pause_button.pack()
        self.pause_button.config(state=tk.DISABLED)  # Сначала кнопка паузы отключена

        # Добавляем кнопку для покупки патронов
        self.buy_ammo_button = tk.Button(root, text="Купить 5 патронов (2 очка)",
                                          command=self.buy_ammo, font=("Arial", 14))
        self.buy_ammo_button.pack()

        # Добавляем кнопку для улучшения пушки
        self.upgrade_gun_button = tk.Button(root, text="Улучшить пушку (50)",
                                             command=self.upgrade_gun, font=("Arial", 14))
        self.upgrade_gun_button.pack()

        self.canvas.bind('<Motion>', self.move_pistol)
        self.canvas.bind('<Button-1>', self.fire_bullet)

    def buy_ammo(self):
        if self.score >= 2:  # Проверяем, достаточно ли очков
            self.score -= 2  # Уменьшаем счет на 2 очка
            self.current_ammo += 5  # Добавляем 5 патронов
            if self.current_ammo > self.max_ammo:
                self.current_ammo = self.max_ammo  # Ограничиваем максимум патронов
            self.score_label.config(text=f"Счет: {self.score}")
            self.ammo_label.config(text=f"Патроны: {self.current_ammo}/{self.max_ammo}")

    def update_upgrade_button_text(self):
        if self.upgrade_level == 0:
            self.upgrade_gun_button.config(text="Улучшить пушку (50)")
        elif self.upgrade_level == 1:
            self.upgrade_gun_button.config(text="Улучшить пушку (200)")
        elif self.upgrade_level == 2:
            self.upgrade_gun_button.config(text="Максимальное улучшение")

    def upgrade_gun(self):
        if self.score >= 200 and self.upgrade_level == 1:  # Проверяем, достаточно ли очков и уровень улучшения 1
            self.score -= 200  # Уменьшаем счет на 200 очков
            self.upgrade_level = 2  # Устанавливаем уровень улучшения на 2
            self.double_shot = True  # Устанавливаем флаг двойного выстрела
            self.score_label.config(text=f"Счет: {self.score}")  # Обновляем отображение счета
            print("Пушка улучшена до уровня 2!")  # Сообщение в консоли (для отладки)

        elif self.score >= 50 and self.upgrade_level == 0:  # Проверяем первое улучшение
            self.score -= 50  # Уменьшаем счет на 50 очков
            self.upgrade_level = 1  # Устанавливаем уровень улучшения на 1
            self.double_shot = True  # Устанавливаем флаг двойного выстрела
            self.score_label.config(text=f"Счет: {self.score}")  # Обновляем отображение счета
            print("Пушка улучшена до уровня 1!")  # Сообщение в консоли (для отладки)

        else:
            print("Недостаточно очков для улучшения пушки.")  # Сообщение в консоли, если недостаточно очков

        # Обновляем текст кнопки после возможного улучшения
        self.update_upgrade_button_text()

    def start_game(self):
        self.is_game_started = True  # Устанавливаем флаг, что игра началась
        self.start_button.config(text="Рестарт")  # Меняем текст кнопки на "Рестарт"
        self.start_button.config(command=self.restart_game)  # Меняем команду для кнопки
        self.pause_button.config(state=tk.NORMAL)  # Включаем кнопку паузы
        self.create_boxes()  # Создаем начальные коробки
        self.root.after(100, self.game_loop)  # Запускаем игровой цикл

    def restart_game(self):
        for box in self.boxes:
            self.canvas.delete(box['id'])  # Удаляем коробки с экрана
            self.canvas.delete(box['hp_text'])  # Удаляем текст HP с экрана
        self.boxes.clear()  # Очищаем список коробок
        for ammo in self.ammo_drops:
            self.canvas.delete(ammo)  # Удаляем патроны с экрана
        self.ammo_drops.clear()  # Очищаем список патронов

        # Сбрасываем состояние игры
        self.score = 600
        self.score_label.config(text=f"Счет: {self.score}")
        self.current_ammo = self.max_ammo  # Сбрасываем патроны
        self.ammo_label.config(text=f"Патроны: {self.current_ammo}/{self.max_ammo}")  # Обновляем отображение патронов
        self.bullets.clear()  # Очищаем существующие пули
        self.ammo_collected = 0  # Сбрасываем собранные патроны
        self.ammo_spawn_timer = None  # Обнуляем таймер
        self.double_shot = False  # Сбрасываем флаг двойного выстрела
        self.upgrade_level = 0  # Сбрасываем уровень улучшения
        self.update_upgrade_button_text()  # Обновляем текст кнопки улучшения
        self.start_game()  # Запускаем игру заново

    def pause_game(self):
        if self.is_game_paused:
            self.is_game_paused = False
            self.pause_button.config(text="Пауза")  # Меняем текст кнопки на "Пауза"
            self.root.after(100, self.game_loop)  # Продолжаем игровой цикл
        else:
            self.is_game_paused = True
            self.pause_button.config(text="Продолжить")  # Меняем текст кнопки на "Продолжить"

    def move_pistol(self, event):
        if self.is_game_started and not self.is_game_paused:  # Проверяем, началась ли игра и не стоит ли она на паузе
            self.pistol_pos = min(max(event.x, 15), 585)  # Ограничиваем позицию пушки
            self.redraw_pistol()

    def redraw_pistol(self):
        self.canvas.delete('pistol')
        self.canvas.create_polygon(self.pistol_pos - 15, self.pistol_pos_y,
                                   self.pistol_pos + 15, self.pistol_pos_y,
                                   self.pistol_pos, self.pistol_pos_y - 20,
                                   fill='green', tags='pistol')

    def fire_bullet(self, event):
        if self.is_game_started and not self.is_game_paused and self.current_ammo > 0:  # Проверяем, началась ли игра, не на паузе, и есть ли патроны
            bullet = self.canvas.create_line(self.pistol_pos, self.pistol_pos_y, self.pistol_pos,
                                             self.pistol_pos_y - 20, fill='red', tags='bullet')
            self.bullets.append(bullet)
            self.current_ammo -= 1  # Уменьшаем количество патронов

            self.ammo_label.config(
                text=f"Патроны: {self.current_ammo}/{self.max_ammo}")  # Обновляем отображение патронов

            # Добавление эффекта отдачи
            self.recoil_down(10)  # 10 пикселей вниз при отдаче

    def recoil_down(self, distance):
        # Смещаем пушку на distance пикселей вниз
        self.pistol_pos_y += distance  # Изменяем Y-координату
        self.redraw_pistol()

        # Возвращаем пушку обратно через 100 мс
        self.root.after(100, lambda: self.reset_recoil(distance))

    def reset_recoil(self, distance):
        # Возвращаем пушку на исходную позицию
        self.pistol_pos_y = 360  # Возвращаем обратно на исходное положение
        self.redraw_pistol()

    def create_boxes(self):
        # Создаем 3 коробки за раз, если их меньше 3
        current_boxes = len(self.boxes)
        if current_boxes < 3:
            for _ in range(3 - current_boxes):
                x = random.randint(0, 550)
                # Вероятность создания коробки с 3 HP (например, 20% шанс)
                if random.random() < 0.2:
                    hp = 3
                    color = 'orange'  # Оранжевый цвет для коробок с 3 HP
                else:
                    hp = 2
                    color = 'brown'  # Коричневый цвет для коробок с 2 HP

                box = self.canvas.create_rectangle(x, 0, x + 50, 50, fill=color, tags='box')
                hp_text = self.canvas.create_text(x + 25, 40, text=f'HP: {hp}', tags='hp')
                self.boxes.append({'id': box, 'hits': 0, 'hp_text': hp_text, 'hp': hp})

    def create_ammo_drop(self):
        if len(self.ammo_drops) < 2:  # Проверяем на максимум патронов на поле
            x = random.randint(0, 550)
            ammo_drop = self.canvas.create_oval(x, 0, x + 20, 20, fill='yellow', tags='ammo')
            self.ammo_drops.append(ammo_drop)

    def update_boxes(self):
        for box in self.boxes[:]:
            self.canvas.move(box['id'], 0, self.box_fall_speed)  # Двигаем коробку вниз
            self.canvas.move(box['hp_text'], 0, self.box_fall_speed)  # Двигаем текст HP вместе с коробкой
            if self.canvas.coords(box['id'])[1] > 400:  # Проверяем, вышла ли коробка за пределы
                self.canvas.delete(box['id'])
                self.canvas.delete(box['hp_text'])  # Удаляем текст HP
                self.boxes.remove(box)  # Удаляем коробку, если она вышла за пределы

    def update_ammo_drops(self):
        for ammo in self.ammo_drops[:]:
            self.canvas.move(ammo, 0, self.ammo_fall_speed)  # Двигаем патрон вниз
            if self.canvas.coords(ammo)[1] > 400:  # Проверяем, ушёл ли патрон за пределы
                self.canvas.delete(ammo)  # Удаляем патрон
                self.ammo_drops.remove(ammo)  # Удаляем из списка

    def check_ammo_touch(self):
        for ammo in self.ammo_drops[:]:
            coords = self.canvas.coords(ammo)
            if coords:
                if self.canvas.coords('pistol')[0] < coords[0] < self.canvas.coords('pistol')[2] and coords[1] > self.pistol_pos_y:  # Проверяем столкновение с пушкой
                    self.ammo_collected += 1  # Увеличиваем счетчик собранных патронов
                    self.current_ammo += 5  # Добавляем 5 патронов
                    if self.current_ammo > self.max_ammo:
                        self.current_ammo = self.max_ammo  # Нельзя превышать максимум
                    self.ammo_label.config(
                        text=f"Патроны: {self.current_ammo}/{self.max_ammo}")  # Обновляем отображение патронов
                    self.canvas.delete(ammo)  # Удаляем патрон
                    self.ammo_drops.remove(ammo)  # Удаляем патрон из списка
                    if self.ammo_collected >= 2:  # Если собрали 2 патрона
                        self.start_ammo_spawn_timer()  # Запускаем таймер
                    return  # Обработка только одного касания за раз

    def start_ammo_spawn_timer(self):
        if self.ammo_spawn_timer:
            self.root.after_cancel(self.ammo_spawn_timer)  # Сбрасываем предыдущий таймер
        self.ammo_spawn_timer = self.root.after(self.ammo_spawn_delay, self.create_ammo_drop)  # Устанавливаем новый таймер

    def move_bullets(self):
        for bullet in self.bullets[:]:
            self.canvas.move(bullet, 0, -10)  # Двигаем пулю вверх
            if self.canvas.coords(bullet)[1] < 0:  # Удаляем пулю, если она вышла за пределы
                self.canvas.delete(bullet)
                self.bullets.remove(bullet)

    def check_bullet_hit(self):
        for bullet in self.bullets[:]:
            coords = self.canvas.coords(bullet)
            for box in self.boxes[:]:
                box_coords = self.canvas.coords(box['id'])
                damage = 1  # Базовый урон

                if self.upgrade_level == 1:  # Первое улучшение
                    damage = 2  # Урон при первом улучшении
                elif self.upgrade_level == 2:  # Второе улучшение
                    damage = 3  # Урон при втором улучшении

                if box_coords and box_coords[0] < coords[0] < box_coords[2] and box_coords[1] < coords[1] < box_coords[3]:
                    self.canvas.delete(bullet)  # Удаляем пулю при попадании
                    self.bullets.remove(bullet)
                    box['hits'] += damage  # Наносим урон коробке

                    # Проверка на удаление коробки
                    if box['hits'] >= box['hp']:  # Если попаданий больше или равно HP
                        self.canvas.delete(box['id'])  # Удаляем коробку
                        self.canvas.delete(box['hp_text'])  # Удаляем текст HP
                        self.boxes.remove(box)  # Удаляем коробку
                        self.score += 1  # Увеличиваем счет на 1
                        self.update_score()  # Обновляем отображение счета
                    else:
                        # Обновляем текст HP
                        self.canvas.itemconfig(box['hp_text'], text=f'HP: {box["hp"] - box["hits"]}')
                    return  # Обработка только одного попадания за раз

    def update_score(self):
        self.score_label.config(text=f"Счет: {self.score}")

    def game_loop(self):
        if self.is_game_started and not self.is_game_paused:  # Проверяем, началась ли игра и не стоит ли она на паузе
            self.move_bullets()  # Обновляем положение пуль
            self.update_boxes()  # Обновляем положение коробок
            self.update_ammo_drops()  # Обновляем положение патронов
            self.check_bullet_hit()  # Проверяем попадания
            self.check_ammo_touch()  # Проверяем касания с патронами

            # Создаем новые коробки, если их нет
            if not self.boxes:
                self.create_boxes()

            self.root.after(100, self.game_loop)  # Повторяем цикл

if __name__ == "__main__":
    root = tk.Tk()
    game = Game(root)
    root.mainloop()
